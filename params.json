{
  "name": "Rest",
  "tagline": "Rest client to make GET, POST, PUT, DELETE, PATCH, etc calls.",
  "body": "# Rest Client\r\n\r\n[![Build Status](https://travis-ci.org/othercodes/rest.svg?branch=master)](https://travis-ci.org/othercodes/rest) [![Latest Stable Version](https://poser.pugx.org/othercode/rest/v/stable)](https://packagist.org/packages/othercode/rest) [![License](https://poser.pugx.org/othercode/rest/license)](https://packagist.org/packages/othercode/rest)\r\n\r\n[Rest client](http://othercode.es/packages/rest-client.html) to make GET, POST, PUT, DELETE, PATCH, etc calls.\r\n\r\n## Installation\r\n\r\nTo install the package we only have to add the dependency to ***scripts/composer.json*** file:\r\n\r\n```javascript\r\n\"require\": {\r\n  \"othercode/rest\": \"*\"\r\n}\r\n```\r\n\r\nAnd run the following command:\r\n\r\n```bash\r\ncomposer update\r\n```\r\n\r\n### Install without Composer\r\n\r\nAlso we can use this library without Composer, we only have to include in our script the **\"rest/autoload.php\"** file.\r\n```php\r\nrequire_once \"rest/autoload.php\".\r\n```\r\n\r\n## Usage\r\n\r\nTo use the Rest we only have to instantiate it and configure the params we want. We can \r\nestablish the configuration accessing to the `->configuration->configure_property`, for example \r\nto configure the url of the call we only have to set the `->configuration->url parameter` and the \r\nconfirm the changes with the `->configure()` method, like we can see as follows:\r\n\r\n```php\r\n$api = new OtherCode\\Rest\\Rest();\r\n$api->configuration->url = \"http://jsonplaceholder.typicode.com/\";\r\n$api->configure();\r\n```\r\n\r\nAfter this we have to set the type of call and the parameters that we wil use, in this case we are\r\ngoing to perform a **GET** request to the **\"posts/1\"** endpoint:\r\n\r\n```php\r\n$response = $api->get(\"posts/1\");\r\n```\r\n\r\nTo control the possible error we only have to check if the code error is different of 0.\r\n\r\n```php\r\nif ($api->getError()->hasError() !== 0) {\r\n    echo $api->getError()->message;\r\n}\r\n```\r\n\r\n**NOTE: These errors are related to the session cURL, here is the [complete list](https://curl.haxx.se/libcurl/c/libcurl-errors.html)**\r\n\r\n## Methods \r\n\r\nThe available methods to work with are:\r\n\r\n#### `->get()`\r\n\r\nPerform a GET request.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$url`                        | String  | Required. The URL to which the request is made\r\n`$data`                       | Array   | Optional. Associative array of data parameters\r\n\r\n**Return**: Response object\r\n\r\n#### `->post()`\r\n\r\nPerform a POST request.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$url`                        | String  | Required. The URL to which the request is made\r\n`$data`                       | Array   | Optional. Associative array of data parameters\r\n\r\n**Return**: Response object\r\n\r\n#### `->delete()`\r\n\r\nPerform a DELETE request.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$url`                        | String  | Required. The URL to which the request is made\r\n`$data`                       | Array   | Optional. Associative array of data parameters\r\n\r\n**Return**: Response object\r\n\r\n#### `->put()`\r\n\r\nPerform a PUT request.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$url`                        | String  | Required. The URL to which the request is made\r\n`$data`                       | Array   | Optional. Associative array of data parameters\r\n\r\n**Return**: Response object\r\n\r\n#### `->patch()`\r\n\r\nPerform a PATCH request.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$url`                        | String  | Required. The URL to which the request is made\r\n`$data`                       | Array   | Optional. Associative array of data parameters\r\n\r\n**Return**: Response object\r\n\r\n#### `->getMetadata()`\r\n\r\nReturn the metadata of the request.\r\n\r\n**Return**: Array\r\n\r\n#### `->getError()`\r\n\r\nReturn the last known error.\r\n\r\n**Return**: `Error` object\r\n\r\n#### `->getPayloads()`\r\n\r\nReturn an array with the `Response` and `Request` objects.\r\n\r\n**Return**: Array\r\n\r\n#### `->configure()`\r\n\r\nSet the main configuration of the cURL instance\r\n\r\nParameters                    | Type          | Description\r\n----------------------------- | ------------- | -------------------------------------------\r\n`$configuration`              | Configuration | Optional. A new instance of Configuration object.\r\n\r\n**Return**: Boolean TRUE on success, FALSE on fail.\r\n\r\n#### `->setDecoder()`\r\n\r\nSet a new Decoder.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$name`                       | String  | Required. The unique name of the decoder.\r\n`$decoder`                    | String  | Optional. The class name with namespace of the new decoder.\r\n\r\n**Return**: Rest object\r\n\r\n#### `->setEncoder()`\r\n\r\nSet a new Encoder.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$name`                       | String  | Required. The unique name of the encoder.\r\n`$encoder`                    | String  | Optional. The class name with namespace of the new encoder.\r\n\r\n**Return**: Rest object\r\n\r\n#### `->setModule()`\r\n\r\nSet a new Module.\r\n\r\nParameters                    | Type    | Description\r\n----------------------------- | ------- | -------------------------------------------\r\n`$name`                       | String  | Required. The unique name of the module.\r\n`$module`                     | String  | Required. The class name with namespace of the new module.\r\n`$hook`                       | String  | Optional. The hook name (after/before) that will trigger the module, 'after' by default.\r\n\r\n**Return**: Rest object\r\n\r\n#### `->unsetModule()`\r\n\r\nUnregister a module.\r\n\r\nParameters                    | Type   | Description\r\n----------------------------- | ------ | -------------------------------------------\r\n`$moduleName`                 | String | Required. The unique name of the decoder.\r\n`$hook`                       | String | Optional. The hook name (after/before) from where delete the module.\r\n\r\n**Return**: Rest object\r\n\r\n#### `->addHeader()`\r\n\r\nAdd a new header.\r\n\r\nParameters                    | Type   | Description\r\n----------------------------- | ------ | -------------------------------------------\r\n`$header`                     | String | Required. The unique name of the header.\r\n`$value`                      | String | Requires. The value of the header.\r\n\r\n**Return**: Rest object\r\n\r\n#### `->addHeaders()`\r\n\r\nAdd an array of headers.\r\n\r\nParameters                    | Type   | Description\r\n----------------------------- | ------ | -------------------------------------------\r\n`$headers`                    | String | Required. An array of headers.\r\n\r\n**Return**: Rest object\r\n\r\n**NOTE: We can use the `addHeader()` and `addHeaders()` methods with the `Rest` instance or with the `configuration` object**\r\n\r\n```php\r\n$api->addHeader('some_header','some_value');\r\n$api->addHeaders(array('some_header' => 'some_value','other_header' => 'other_value'));\r\n```\r\n\r\nis the same as\r\n\r\n```php\r\n$api->configuration->addHeader('some_header','some_value');\r\n$api->configuration->addHeaders(array('some_header' => 'some_value','other_header' => 'other_value'));\r\n```\r\n\r\n## Modules\r\n\r\nThis package allow you to create modules to perform task before and after the request..\r\nTo create a new module we only have to use this template:\r\n\r\n```php\r\nclass CustomModule extends BaseModule\r\n{\r\n    public function run()\r\n    {\r\n        // do something\r\n    }\r\n}\r\n```\r\n\r\n**IMPORTANT: Any module MUST extends BaseModule**\r\n\r\nThe only method that is mandatory is `->run()`, this method execute your custom code of the module.\r\n\r\nOnce we have our module we can register it with the `->setModule()` method. This method needs three parameters,\r\nthe first one is the name of the module, the second one is the complete namespace of the module, and the third one \r\nis the hook name for our module, it can be \"before\" and \"after\" depends when we want to launch our module.\r\n \r\n```php\r\n$api->setModule('module_name','Module\\Complete\\Namespace','after');\r\n```\r\n\r\nFor \"before\" modules you can use all the properties of the Request object.\r\n\r\n* `->method`\r\n* `->url` \r\n* `->headers`\r\n* `->body`\r\n\r\nFor \"after\" modules you can use all the properties of the Response object.\r\n\r\nAll modules are executed in the order that we register them into the Rest client, this also affect \r\nto Decoders and Encoders.\r\n\r\n## Decoders\r\n\r\nA decoder is a kind of module that allows you to automatically decode de response in xml or json, to use them \r\nwe only have to set the decoder we want with the `->setDecoder()` method:\r\n\r\n```php\r\n$api->setDecoder(\"json\");\r\n```\r\n\r\nThe default allowed values for this method are: ***json***, ***xml*** and ***xmlrpc***. All the decoders are always executed \r\nin the \"after\" hook. \r\n\r\n###Custom Decoders\r\n\r\nTo create a new decoder we only have to use this template:\r\n\r\n```php\r\nclass CustomDecoder extends BaseDecoder\r\n{\r\n\tprotected $contentType = 'application/json';\r\n\r\n\tprotected function decode()\r\n\t{\r\n\t\t// decode $this->body\r\n\t}\r\n}\r\n```\r\n\r\nLike in modules, we have the Response object available to work. The $contentType property is the content-type \r\nthat will trigger the decoder, in the example above all responses with content-type \"application/json\" will \r\ntrigger this decoder.\r\n\r\n## Complete Example\r\n\r\n```php\r\nrequire_once '../autoload.php';\r\n\r\n$api = new OtherCode\\Rest\\Rest();\r\n$api->configuration->url = \"http://jsonplaceholder.typicode.com/\";\r\n$api->configuration->addHeader('some_header','some_value');\r\n$api->configure();\r\n\r\n$api->setDecoder(\"json\");\r\n\r\n$response = $api->get(\"posts/1\");\r\n\r\nif ($api->getError()->hasError() !== 0) {\r\n    echo $api->getError()->message;\r\n}\r\nvar_dump($response);\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}